// NOTE This file is auto-generated by Contentlayer

import type { Markdown, MDX, ImageFieldData, IsoDateTimeString } from 'contentlayer2/core'
import * as Local from 'contentlayer2/source-files'

export { isType } from 'contentlayer2/client'

export type { Markdown, MDX, ImageFieldData, IsoDateTimeString }

/** Document types */
export type Attorney = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Attorney'
  /** The name of the attorney */
  name: string
  /** The date created */
  date: IsoDateTimeString
  /** The featurted image of the attorney post */
  image: string
  /** Order for desc or asc */
  order: string
  /** The role of the attorney */
  expertise: string
  /** The email address of the attorney */
  email?: string | undefined
  /** The phone number of the attorney */
  phone?: string | undefined
  /** MDX file body */
  body: MDX
  url: string
}

export type Post = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Post'
  /** The title of the post */
  title: string
  /** The excerpt of the post */
  excerpt: string
  /** The date of the post */
  date: IsoDateTimeString
  /** The featured image of the post */
  image: string
  /** The author image of the post */
  author: string
  /** The categories of the post */
  categories: Category[]
  /** MDX file body */
  body: MDX
  url: string
}

export type Practicing = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Practicing'
  /** The title of the practicing */
  title: string
  /** The featured image of the practicing */
  image: string
  /** The order of the practicing */
  order: string
  /** MDX file body */
  body: MDX
  url: string
}  

/** Nested types */
export type Category = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Category'
  /** The title of the category */
  title: string

}  

/** Helper types */

export type AllTypes = DocumentTypes | NestedTypes
export type AllTypeNames = DocumentTypeNames | NestedTypeNames

export type DocumentTypes = Attorney | Post | Practicing
export type DocumentTypeNames = 'Attorney' | 'Post' | 'Practicing'

export type NestedTypes = Category
export type NestedTypeNames = 'Category'

export type DataExports = {
  allDocuments: DocumentTypes[]
  allAttorneys: Attorney[]
  allPracticings: Practicing[]
  allPosts: Post[]
}


export interface ContentlayerGenTypes {
  documentTypes: DocumentTypes
  documentTypeMap: DocumentTypeMap
  documentTypeNames: DocumentTypeNames
  nestedTypes: NestedTypes
  nestedTypeMap: NestedTypeMap
  nestedTypeNames: NestedTypeNames
  allTypeNames: AllTypeNames
  dataExports: DataExports
}

declare global {
  interface ContentlayerGen extends ContentlayerGenTypes {}
}

export type DocumentTypeMap = {
  Attorney: Attorney
  Post: Post
  Practicing: Practicing
}

export type NestedTypeMap = {
  Category: Category
}

 